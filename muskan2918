module alu (
    input [3:0] A, B,
    input [2:0] ALU_Sel,
    output reg [3:0] ALU_Out,
    output reg CarryOut
);

always @(*) begin
    case (ALU_Sel)
        3'b000: {CarryOut, ALU_Out} = A + B;           // ADD
        3'b001: {CarryOut, ALU_Out} = A - B;           // SUB
        3'b010: ALU_Out = A & B;                       // AND
        3'b011: ALU_Out = A | B;                       // OR
        3'b100: ALU_Out = ~A;                          // NOT A
        default: ALU_Out = 4'b0000;
    endcase
end

endmodule

module alu_tb;

reg [3:0] A, B;
reg [2:0] ALU_Sel;
wire [3:0] ALU_Out;
wire CarryOut;

alu uut (
    .A(A), .B(B),
    .ALU_Sel(ALU_Sel),
    .ALU_Out(ALU_Out),
    .CarryOut(CarryOut)
);

initial begin
    $display("Time\tA\tB\tSel\tOut\tCarry");
    $monitor("%0t\t%b\t%b\t%b\t%b\t%b", $time, A, B, ALU_Sel, ALU_Out, CarryOut);

    A = 4'b0101; B = 4'b0011;

    ALU_Sel = 3'b000; #10; // ADD
    ALU_Sel = 3'b001; #10; // SUB
    ALU_Sel = 3'b010; #10; // AND
    ALU_Sel = 3'b011; #10; // OR
    ALU_Sel = 3'b100; #10; // NOT A

    $stop;
end

endmodule

